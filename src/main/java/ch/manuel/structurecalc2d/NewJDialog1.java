//Autor: Manuel Schmocker
//Datum: 17.12.2023
package ch.manuel.structurecalc2d;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.DefaultComboBoxModel;

//Klasse zum Eingeben eines neuen Stabes
//Eingabefenser erstellen neuen Stab "Neuer Stab"
public class NewJDialog1 extends javax.swing.JDialog {

  private final DefaultComboBoxModel section;
  private final String NO_DATA = "no data";
  private final String textField1 = "Pt1 Pt2";
  // icon in resources
  private static final String ICON = "/icon/icon.png";

  //Konstruktor
  public NewJDialog1(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    section = new DefaultComboBoxModel(new String[]{NO_DATA});
    initComponents();
    setIcon();

    //Position Fenster festlegen
    int width = this.getWidth();
    int hight = this.getHeight();
    java.awt.Dimension d = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    this.setLocation((int) ((d.getWidth() - width) / 2), (int) ((d.getHeight() - hight) / 2));
  }

  // PRIVATE FUNCTIONS
  // set icon
  private void setIcon() {
    Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource(ICON));
    this.setIconImage(image);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setTitle("Neuer Stab");
        setResizable(false);

        jLabel1.setText("Stab: Punkt Start - Ende");

        jLabel3.setText("Stab Typ:");

        jComboBox1.setModel(section);

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Abbrechen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Neuen Stab definieren:");

        jTextField1.setText(textField1);
        jTextField1.setToolTipText("Punkte eingeben. Mit Leerzeichen trennen.");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  //Button OK pressed
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      pressedOK();
    }//GEN-LAST:event_jButton1ActionPerformed

  //Button Abbrechen pressed
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      this.setVisible(false);         //Fenster auf nicht sichtbar, visible: false
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        pressedOK();
      }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
      jTextField1.selectAll();
    }//GEN-LAST:event_jTextField1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

  public void setSelection() {
    //Auswahl für ComboBox leeren
    section.removeAllElements();

    //Box1: Auswahl Querschnitte zusammenstellen
    int nb = Structure.getSections().size();
    if (nb == 0) {
      section.addElement(NO_DATA);
    } else {
      for (int i = 0; i < nb; i++) {
        section.addElement("Section " + Integer.toString(i + 1));
      }
    }
    jTextField1.setText(textField1);
  }

  //Auswahl zurückgeben (selection)
  private void createBeam(int pts[]) {
    int s1 = pts[0];
    int s2 = pts[1];
    int s3 = jComboBox1.getSelectedIndex();

    //Neuer Stab erstellen
    if (s1 >= 0 && s2 >= 0 && s3 >= 0) {
      //Auswahl Punkte
      Points p1 = Structure.getPt(s1);
      Points p2 = Structure.getPt(s2);

      //Auswahl Querschnitt
      double surf, mod;
      surf = Structure.getSections().get(s3)[0];
      mod = Structure.getSections().get(s3)[1];

      //Stab erstellen
      Structure.addBeam(p1, p2, mod, surf);
    }
  }

  //Test Input: Ist die Eingabe ein gültiger Stab
  private boolean testInput(int pts[]) {
    //Werte (ID-Punkt) muss grösser null sein
    if (pts[0] < 0 | pts[1] < 0) {
      MyUtilities.getErrorMsg("Eingabefehler", "Punkt ID muss grösser als 0 sein!");
      return false;
    }
    //Werte (ID-Punkt) dürfen nicht höher als die Anzal Punke sein:
    if (pts[0] >= Structure.getNbPts() | pts[1] >= Structure.getNbPts()) {
      MyUtilities.getErrorMsg("Eingabefehler", "Punkt ID muss kleiner als " + (Structure.getNbPts() + 1) + " sein!");
      return false;
    }
    //Werte (ID-Punkt) dürfen nicht identisch sein (Verbindung mit sich selbst)
    if (pts[0] == pts[1]) {
      MyUtilities.getErrorMsg("Eingabefehler", "ID1 und ID2 müssen unterschiedlich sein!");
      return false;
    }
    //Neuer Stab darf einen bestehenden Stab nicht überlagern
    for (int i = 0; i < Structure.getNbBeams(); i++) {
      if ((pts[0] == Structure.getBeam(i).getStartPt().getPtID()) & (pts[1] == Structure.getBeam(i).getEndPt().getPtID())) {
        MyUtilities.getErrorMsg("Eingabefehler", "Stab bereits vorhanden!");
        return false;
      }
      if ((pts[1] == Structure.getBeam(i).getStartPt().getPtID()) & (pts[0] == Structure.getBeam(i).getEndPt().getPtID())) {
        MyUtilities.getErrorMsg("Eingabefehler", "Stab bereits vorhanden!");
        return false;
      }
    }
    //Kein Fehler entdeckt? -> true
    return true;
  }

  //Input aus Textfeld auswerten
  //Welche Punkte werden verbunden?
  //Rückgabe: Array mit ID Punkt 1 und ID Punkt 2
  private int[] getPoints() {
    //Lokale Variablen
    boolean validInput = false;
    String txt;
    String txt2[] = new String[1];
    int a[] = new int[2];

    txt = jTextField1.getText();
    if (txt != null) {
      String txt3[] = txt.split(" ");
      if (txt3.length == 2) {             //Nur 2 Elemente werden akzeptiert (pt1, pt2)
        for (String str : txt3) {
          if (!MyUtilities.isInteger(str)) {      //Ist der Input eine Zahl
            validInput = false;
            break;
          }
          validInput = true;
          txt2 = txt3;
        }
      }
    }
    if (validInput) {
      a[0] = Integer.parseInt(txt2[0]) - 1;
      a[1] = Integer.parseInt(txt2[1]) - 1;
      return a;
    } else {
      return null;
    }
  }

  //Code, falls Enter oder OK gedrückt wird
  private void pressedOK() {
    int aa[] = getPoints();
    if (aa == null) {
      //Fenster nicht schliessen, Eingabe wiederholen
      MyUtilities.getErrorMsg("Eingabefehler", "Für Eingabe Format \"Pt1 Pt2\" verwenden");
    } else {
      if (jComboBox1.getSelectedItem().toString().equals(NO_DATA)) {
        //Fenster schliessen, jedoch keinen Punkt erstellen, da Querschnitt nicht definiert wurde
        MyUtilities.getErrorMsg("Eingabefehler", "Keine Querschnitts-Typ definiert!");
        this.setVisible(false);
      } else {
        //Fenster schliessen und Stab erstellen
        this.setVisible(false);
        if (testInput(aa)) {
          createBeam(aa);
        }
        Main.myFrame.updateMyPlot();    //Zeichnung aktualisieren: mit neuem Stab
      }
    }
  }
}
